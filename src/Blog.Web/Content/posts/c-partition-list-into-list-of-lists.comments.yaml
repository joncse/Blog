- Email: "luv2code+kijanassite@gmail.com"
  Message: "<p>Seems like GroupBy would work in this scenario.  How is this different?</p>"
  Name: "Matt T"
  When: "2010-10-17 08:28:55.000"
- Email: "luv2code+kijanassite@gmail.com"
  Message: "<p>Wouldn't GroupBy on DivisionId work in this scenario?<br>Here's a linqpad query to illustrate what I mean:<br>void Main()<br>{</p><p>var list = Enumerable.Range(0, 9);</p><p>var groups = from x in list<br>group x by x.ModByTwo() into itemgroup<br>select itemgroup;<br>groups.Dump();<br>}</p><p>// Define other methods and classes here<br>public static class IntExtension<br>{<br>public static int ModByTwo(this int input){<br>return input % 2;<br>}<br>}</p>"
  Name: "Matt T"
  When: "2010-10-17 08:40:07.000"
- Email: "kijanawoodard@wyldeye.com"
  Message: "<p>I don't think so. I may not fully grok the linq group by, but doesn't it flatten the records similar to a sql group by? I still needed the individual records, but I needed them in sets based on their DivisionId, hence the List of Lists.</p><p>A ModByTwo-like function would require knowledge of how many items to stick in each sub lists which we don't know until runtime, but I think you were just using that for illustration.</p>"
  Name: "kijana"
  When: "2010-10-17 10:01:31.000"
- Email: "kijanawoodard@wyldeye.com"
  Message: "<p>Well blow me down. You're right. I had to go try it out.</p><p>All I had to was list.GroupBy(x =&gt; x.DivisionId);</p><p>I was confused because it returns IGrouping. I thought I had to do something special with it. I bound it to my repeater and, blam, everything worked without the partitioning logic. No extension methods necessary.</p><p>The Linq group by IS different from sql. Nice.</p>"
  Name: "kijana"
  When: "2010-10-17 10:14:13.000"